@page
@model IndexModel
@{
    ViewData["Title"] = "Micro-ondas Digital";
}

<h1>🎛️ Micro-ondas Digital</h1>

<h2>🍽️ Todos os Programas</h2>
<div class="predefined-programs">
    @foreach (var program in Model.AllPrograms)
    {
        <div class="program-card @(program.IsCustom ? "custom-program" : "")">
            @if (program.IsCustom)
            {
                <button type="button" class="program-btn" onclick="startCustomProgram('@program.Id')">
                    <strong>@program.DisplayName</strong><br />
                    <small>@program.Food</small><br />
                    <small>@program.TimeFormatted, P@(program.PowerLevel)</small>
                </button>
                <div class="program-instructions">
                    <strong>Instruções:</strong><br />
                    @(string.IsNullOrEmpty(program.Instructions) ? "Nenhuma instrução específica." : program.Instructions)
                    <div class="program-actions">
                        <button type="button" class="btn-program-action btn-edit" onclick="editCustomProgram('@program.Id')">
                            ✏️ Editar
                        </button>
                        <button type="button" class="btn-program-action btn-delete"
                            onclick="deleteCustomProgram('@program.Id', '@program.Name')">
                            🗑️ Excluir
                        </button>
                    </div>
                </div>
            }
            else
            {
                <form method="post" asp-page-handler="StartPredefinedProgram" style="margin: 0;">
                    <input type="hidden" name="programName" value="@program.Name" />
                    <button type="submit" class="program-btn" data-program="@program.Name">
                        <strong>@program.Name</strong><br />
                        <small>@program.Food</small><br />
                        <small>@program.TimeFormatted, P@(program.PowerLevel)</small>
                    </button>
                </form>
                <div class="program-instructions">
                    <strong>Instruções:</strong><br />
                    @program.Instructions
                </div>
            }
        </div>
    }
</div>

<div class="custom-programs-header">
    <h3>✨ Programas Personalizados</h3>
    <button type="button" class="btn-add-custom" onclick="openCustomProgramModal()">
        ➕ Criar Programa
    </button>
</div>

<hr style="margin: 20px 0;" />

<h2>🔥 Aquecimento Manual</h2>

<form method="post" asp-page-handler="StartHeating" id="startForm">
    <div style="margin-bottom: 10px;">
        <label for="timeInSeconds">Tempo (segundos, 1-120):</label>
        <input type="number" id="timeInSeconds" name="timeInSeconds" min="1" max="120" class="form-control"
            style="width: 200px; display: inline-block;" />
    </div>
    <div style="margin-bottom: 10px;">
        <label for="powerLevel">Potência (1-10):</label>
        <input type="number" id="powerLevel" name="powerLevel" min="1" max="10" value="10" class="form-control"
            style="width: 200px; display: inline-block;" />
    </div>
    <button type="submit" id="startBtn" class="btn btn-success">Iniciar Aquecimento</button>
</form>

<form method="post" asp-page-handler="ResumeHeating" id="resumeForm" style="display:none;">
    <button type="submit" id="resumeBtn" class="btn btn-warning">Retomar Aquecimento</button>
</form>

<div style="margin-top: 15px;">
    <form method="post" asp-page-handler="StartQuickHeat" style="display:inline; margin-right: 10px;">
        <button type="submit" class="btn btn-info">Início Rápido (30s, P10)</button>
    </form>

    <form method="post" asp-page-handler="IncreaseTime" style="display:inline; margin-right: 10px;">
        <button type="submit" class="btn btn-outline-primary">+30s</button>
    </form>

    <form method="post" asp-page-handler="PauseOrCancel" style="display:inline;">
        <button type="submit" id="pauseCancelBtn" class="btn btn-danger">Pausar/Cancelar</button>
    </form>
</div>

@if (ViewData["Message"] != null)
{
    <div class="alert alert-info" role="alert" style="margin-top: 15px;">
        <strong>@ViewData["Message"]</strong>
    </div>
}

@Html.AntiForgeryToken()

<hr />

<h2>📊 Status do Microondas</h2>
<button id="getProgressBtn" type="button" class="btn btn-primary">Ver Progresso</button>
<button id="autoUpdateBtn" type="button" class="btn btn-secondary">Atualização Automática</button>
<div id="progressContainer" style="margin-top: 20px;">
    <p id="progressText">Clique para ver o progresso.</p>
    <div id="visualProgress" class="program-progress">
    </div>
</div>

<script>
    let autoUpdateInterval = null;

    function updateProgramStatus(data) {
        const programButtons = document.querySelectorAll('.program-btn');
        const currentProgram = data.currentProgram;

        programButtons.forEach(btn => {
            if (currentProgram && btn.getAttribute('data-program') === currentProgram) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
    }

    async function updateProgress() {
        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const response = await fetch('/?handler=GetProgress', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            });

            const data = await response.json();

            document.getElementById('progressText').innerText =
                `Status: ${data.isRunning ? 'Aquecendo' : 'Parado'} | ` +
                `Tempo restante: ${data.formattedRemainingTime} | ` +
                `Potência: ${data.powerLevel} | ` +
                `Progresso: ${data.progressPercent}%`;

            document.getElementById('visualProgress').innerText = data.progress;

            updateProgramStatus(data);

            const startForm = document.getElementById('startForm');
            const resumeForm = document.getElementById('resumeForm');
            const pauseBtn = document.getElementById('pauseCancelBtn');
            const startBtn = document.getElementById('startBtn');
            const timeInput = document.getElementById('timeInSeconds');
            const powerInput = document.getElementById('powerLevel');
            const autoUpdateBtn = document.getElementById('autoUpdateBtn');

            if (data.progress && data.progress.includes('PAUSADO')) {
                startForm.style.display = 'none';
                resumeForm.style.display = 'block';
                pauseBtn.textContent = 'Cancelar';
                if (autoUpdateInterval) {
                    clearInterval(autoUpdateInterval);
                    autoUpdateInterval = null;
                    autoUpdateBtn.textContent = 'Atualização Automática';
                }
            } else if (data.isRunning) {
                startForm.style.display = 'block';
                resumeForm.style.display = 'none';
                startBtn.textContent = 'Aquecendo...';
                startBtn.disabled = true;
                timeInput.disabled = true;
                powerInput.disabled = true;
                pauseBtn.textContent = 'Pausar';

                if (!autoUpdateInterval) {
                    autoUpdateInterval = setInterval(updateProgress, 1000);
                    autoUpdateBtn.textContent = 'Parar Atualização';
                }
            } else {
                startForm.style.display = 'block';
                resumeForm.style.display = 'none';
                startBtn.textContent = 'Iniciar Aquecimento';
                startBtn.disabled = false;
                timeInput.disabled = false;
                powerInput.disabled = false;
                timeInput.required = true;
                powerInput.required = true;
                pauseBtn.textContent = 'Limpar';

                if (autoUpdateInterval && data.progress && data.progress.includes('concluído')) {
                    clearInterval(autoUpdateInterval);
                    autoUpdateInterval = null;
                    autoUpdateBtn.textContent = 'Atualização Automática';
                }
            }

        } catch (error) {
            console.error('Erro no progresso:', error);
            document.getElementById('progressText').innerText = 'Erro ao obter progresso.';
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
    });

    document.getElementById('getProgressBtn').addEventListener('click', updateProgress);

    document.getElementById('autoUpdateBtn').addEventListener('click', () => {
        if (autoUpdateInterval) {
            clearInterval(autoUpdateInterval);
            autoUpdateInterval = null;
            document.getElementById('autoUpdateBtn').innerText = 'Atualização Automática';
        } else {
            autoUpdateInterval = setInterval(updateProgress, 1000);
            document.getElementById('autoUpdateBtn').innerText = 'Parar Atualização';
            updateProgress();
        }
    });

    document.getElementById('startForm').addEventListener('submit', function (e) {
        const timeInput = document.getElementById('timeInSeconds');
        const powerInput = document.getElementById('powerLevel');

        if (!timeInput.disabled && (!timeInput.value || !powerInput.value)) {
            e.preventDefault();
            alert('Por favor, preencha tempo e potência.');
            return false;
        }
    });
</script>

<!-- Modal para CRUD de Programas Customizados -->
<div id="customProgramModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title" id="modalTitle">Criar Programa Personalizado</h2>
            <button type="button" class="close" onclick="closeCustomProgramModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="customProgramForm">
                <div class="form-group">
                    <label for="programName">Nome do Programa:</label>
                    <input type="text" id="programName" name="name" required maxlength="50">
                    <div class="error-message" id="nameError"></div>
                </div>

                <div class="form-group">
                    <label for="programFood">Alimento:</label>
                    <input type="text" id="programFood" name="food" required maxlength="50">
                    <div class="error-message" id="foodError"></div>
                </div>

                <div class="form-group">
                    <label for="programPower">Potência (1-10):</label>
                    <input type="number" id="programPower" name="powerLevel" min="1" max="10" required>
                    <div class="error-message" id="powerError"></div>
                </div>

                <div class="form-group">
                    <label for="programTime">Tempo (segundos, 1-7200):</label>
                    <input type="number" id="programTime" name="timeInSeconds" min="1" max="7200" required>
                    <div class="error-message" id="timeError"></div>
                </div>

                <div class="form-group">
                    <label for="programCharacter">Caractere de Aquecimento:</label>
                    <div style="display: flex; align-items: center;">
                        <input type="text" id="programCharacter" name="character" maxlength="1" required
                            onkeyup="validateCharacter(this.value)" style="flex: 1;">
                        <div class="character-preview" id="characterPreview"></div>
                    </div>
                    <div class="error-message" id="characterError"></div>
                </div>

                <div class="form-group">
                    <label for="programInstructions">Instruções (opcional):</label>
                    <textarea id="programInstructions" name="instructions" maxlength="200"
                        placeholder="Instruções especiais para este programa..."></textarea>
                    <div class="error-message" id="instructionsError"></div>
                </div>

                <input type="hidden" id="programId" name="id">
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-modal btn-secondary-modal"
                onclick="closeCustomProgramModal()">Cancelar</button>
            <button type="button" class="btn-modal btn-primary-modal" onclick="saveCustomProgram()">Salvar</button>
        </div>
    </div>
</div>

<script>
    let currentEditingId = null;

    async function startCustomProgram(programId) {
        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const response = await fetch(`/api/microwave/programs/custom/${programId}/start`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();

            if (response.ok) {
                alert(result.message);
                location.reload();
            } else {
                alert(`Erro: ${result.message}`);
            }
        } catch (error) {
            console.error('Erro ao iniciar programa:', error);
            alert('Erro ao iniciar programa personalizado.');
        }
    }

    function openCustomProgramModal(programId = null) {
        currentEditingId = programId;
        const modal = document.getElementById('customProgramModal');
        const modalTitle = document.getElementById('modalTitle');
        const form = document.getElementById('customProgramForm');

        form.reset();
        clearErrors();

        if (programId) {
            modalTitle.textContent = 'Editar Programa Personalizado';
            loadProgramData(programId);
        } else {
            modalTitle.textContent = 'Criar Programa Personalizado';
        }

        modal.style.display = 'block';
    }

    function closeCustomProgramModal() {
        const modal = document.getElementById('customProgramModal');
        modal.style.display = 'none';
        currentEditingId = null;
        clearErrors();
    }

    async function loadProgramData(programId) {
        try {
            const response = await fetch(`/api/microwave/programs/custom/${programId}`);

            if (response.ok) {
                const program = await response.json();

                document.getElementById('programName').value = program.name;
                document.getElementById('programFood').value = program.food;
                document.getElementById('programPower').value = program.powerLevel;
                document.getElementById('programTime').value = program.timeInSeconds;
                document.getElementById('programCharacter').value = program.character;
                document.getElementById('programInstructions').value = program.instructions || '';
                document.getElementById('programId').value = program.id;

                updateCharacterPreview(program.character);
            } else {
                alert('Erro ao carregar dados do programa.');
            }
        } catch (error) {
            console.error('Erro ao carregar programa:', error);
            alert('Erro ao carregar dados do programa.');
        }
    }

    async function saveCustomProgram() {
        clearErrors();

        const formData = {
            name: document.getElementById('programName').value,
            food: document.getElementById('programFood').value,
            powerLevel: parseInt(document.getElementById('programPower').value),
            timeInSeconds: parseInt(document.getElementById('programTime').value),
            character: document.getElementById('programCharacter').value,
            instructions: document.getElementById('programInstructions').value
        };

        if (!validateForm(formData)) {
            return;
        }

        try {
            const isEditing = currentEditingId !== null;
            const url = isEditing
                ? `/api/microwave/programs/custom/${currentEditingId}`
                : '/api/microwave/programs/custom';
            const method = isEditing ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (response.ok) {
                alert(isEditing ? 'Programa atualizado com sucesso!' : 'Programa criado com sucesso!');
                closeCustomProgramModal();
                location.reload();
            } else {
                if (result.message.includes(',')) {
                    const errors = result.message.split(',');
                    errors.forEach(error => displayError(error.trim()));
                } else {
                    alert(`Erro: ${result.message}`);
                }
            }
        } catch (error) {
            console.error('Erro ao salvar programa:', error);
            alert('Erro ao salvar programa.');
        }
    }

    async function deleteCustomProgram(programId, programName) {
        if (!confirm(`Tem certeza que deseja excluir o programa "${programName}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/microwave/programs/custom/${programId}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (response.ok) {
                alert('Programa excluído com sucesso!');
                location.reload();
            } else {
                alert(`Erro: ${result.message}`);
            }
        } catch (error) {
            console.error('Erro ao excluir programa:', error);
            alert('Erro ao excluir programa.');
        }
    }

    function editCustomProgram(programId) {
        openCustomProgramModal(programId);
    }

    async function validateCharacter(character) {
        updateCharacterPreview(character);

        if (character.length === 0) {
            return;
        }

        const excludeId = currentEditingId;
        const url = excludeId
            ? `/api/microwave/characters/${encodeURIComponent(character)}/unique?excludeId=${excludeId}`
            : `/api/microwave/characters/${encodeURIComponent(character)}/unique`;

        try {
            const response = await fetch(url);
            const result = await response.json();

            const errorDiv = document.getElementById('characterError');
            if (!result.isUnique) {
                errorDiv.textContent = `Caractere '${character}' já está sendo usado.`;
            } else {
                errorDiv.textContent = '';
            }
        } catch (error) {
            console.error('Erro ao validar caractere:', error);
        }
    }

    function updateCharacterPreview(character) {
        const preview = document.getElementById('characterPreview');
        preview.textContent = character || '';
    }

    function validateForm(formData) {
        let isValid = true;

        if (!formData.name || formData.name.length < 2) {
            displayError('Nome deve ter pelo menos 2 caracteres.', 'nameError');
            isValid = false;
        }

        if (!formData.food || formData.food.length < 2) {
            displayError('Alimento deve ter pelo menos 2 caracteres.', 'foodError');
            isValid = false;
        }

        if (formData.powerLevel < 1 || formData.powerLevel > 10) {
            displayError('Potência deve estar entre 1 e 10.', 'powerError');
            isValid = false;
        }

        if (formData.timeInSeconds < 1 || formData.timeInSeconds > 7200) {
            displayError('Tempo deve estar entre 1 e 7200 segundos.', 'timeError');
            isValid = false;
        }

        if (!formData.character || formData.character.length !== 1) {
            displayError('Caractere é obrigatório.', 'characterError');
            isValid = false;
        }

        return isValid;
    }

    function displayError(message, elementId = null) {
        if (elementId) {
            document.getElementById(elementId).textContent = message;
        }
    }

    function clearErrors() {
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(element => element.textContent = '');
    }

    // Fechar modal ao clicar fora dele
    window.onclick = function (event) {
        const modal = document.getElementById('customProgramModal');
        if (event.target === modal) {
            closeCustomProgramModal();
        }
    };
</script>
